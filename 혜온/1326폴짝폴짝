#include<iostream>
#include<queue>
using namespace std;

int N;
int bridge[10001] = { 0 };
int countNum[10001] = { 0 };
bool visited[10001] = { false };
bool being = true;
int a,b,start;
int cnt = 0, min1 = -1;
queue<int>q;

void bfs(int a)
{
	q.push(a);
	visited[a] = true;
	countNum[bridge[a]]++;
	while (!q.empty())
	{
		
		a = q.front();
		visited[a] = true;
		q.pop();
		int i = 1;
		
		for(int i=1;i<=N;i++)
		{                                             
			if (bridge[a] * i + a <= N)
			{
				
				if (bridge[a] * i + a == b)
				{
					
					if (bridge[a] == start)
						cnt = 1;
					else
						cnt = countNum[a] + 1;
					being = false;
					while (!q.empty()) q.pop();
					break;
				}
				if (bridge[bridge[a] * i + a] != 0&& !visited[bridge[a] * i + a])
				{

					q.push(bridge[a] * i + a);
					countNum[bridge[a] * i + a]++; 
					visited[bridge[a] * i + a] = true;
					
				}
			}
			if (bridge[a] * -1 * i + a >= 1)
			{
				if (bridge[a] * -1*i + a == b)
				{
					
					cnt = countNum[a] + 1;
					being = false;
					while (!q.empty()) q.pop();
					break;
				}
				if (bridge[bridge[a] * -1 * i + a] != 0 && !visited[bridge[a] * i + a])
				{
					
					countNum[bridge[a] * -1 * i + a]++; 
					q.push(bridge[a] * -1 * i + a);
					visited[bridge[a] * -1 * i + a] = true;
				}
			}
			
				
		}
	
	}
}



int main()
{
	cin >> N;
	for (int i = 1; i <= N; i++)
		cin >> bridge[i];
	cin >> a >> b;
	start = a;
	bfs(a);
	if (being)
		cout << -1;
	else
		cout << cnt;
	cout << endl;
	
}
